########################################
# Ruby snippets - for Rails, see below #
########################################

# #!/usr/bin/env ruby
snippet #!
	#!/usr/bin/env ruby
	# encoding: utf-8

snippet beg
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
	end
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet cla class .. initialize .. end
	class ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		def initialize(${2:args})
			${3}
		end
	end
snippet cls class << self .. end
	class << ${1:self}
		${2}
	end
# class .. < DelegateClass .. initialize .. end
snippet cla-
	class ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < DelegateClass(${2:ParentClass})
		def initialize(${3:args})
			super(${4:del_obj})

			${5}
		end
	end
snippet mod module .. end
	module ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
	end
snippet mods module .. ClassMethods .. end
	module ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		module ClassMethods
			${2}
		end

		module InstanceMethods

		end

		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end
snippet ea
	each { |${1:e}| ${2} }
snippet inj
	inject(${1:init}) { |${2:mem}, ${3:var}| ${4} }
snippet map
	map { |${1:e}| ${2} }
snippet fin
	find { |${1:e}| ${2} }
snippet do
	do
		${1}
	end
snippet pry
	require 'pry'; binding.pry

#############################################
# Rails snippets - for pure Ruby, see above #
#############################################
snippet log
	Rails.logger.${1:debug} ${2}
snippet mapc
	${1:map}.${2:connect} '${3:controller/:action/:id}'
snippet mcht
	change_table :${1:table_name} do |t|
		${2}
	end
###########################
#   migrations snippets   #
###########################
snippet mac
	add_column :${1:table_name}, :${2:column_name}, :${3:data_type}
snippet mai
	add_index :${1:table_name}, :${2:column_name}
snippet mrc
	remove_column :${1:table_name}, :${2:column_name}
snippet mrnc
	rename_column :${1:table_name}, :${2:old_column_name}, :${3:new_column_name}
snippet mcc
	change_column :${1:table}, :${2:column}, :${3:type}
snippet mnc
	t.${1:string} :${2:title}${3:, null: false}${4}
snippet mct
	create_table :${1:table_name} do |t|
		${2}
	end
snippet migration class .. < ActiveRecord::Migration .. def up .. def down .. end
	class ${1:class_name} < ActiveRecord::Migration
		def up
			${2}
		end

		def down
		end
	end
snippet migration class .. < ActiveRecord::Migration .. def change .. end
	class ${1:class_name} < ActiveRecord::Migration
		def change
			${2}
		end
	end
##########################
#     Rspec snippets     #
##########################
snippet desc
	require "spec_helper"

	describe ${1} do
		it "${2}" do
		end
	end
snippet cont
	context "${1:message}" do
		${2}
	end
snippet exp
	expect (${1:object}).to eq(${2})
snippet raise
	expect { ${1:object} }.to raise_error ${2:StandardError}, /${3:message_regex}/
snippet it
	it "${1:spec_name}" do
		${2}
	end
